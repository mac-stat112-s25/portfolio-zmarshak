---
title: "ica-wrangling"
format: html
---
```{r}
# Load tidyverse & data
library(tidyverse)
elections <- read.csv("https://mac-stat.github.io/data/election_2020_county.csv")
```

Use `select()` to create a simplified dataset that we'll use throughout the exercises below.

-   Store this dataset as `elections_small`.
-   Only keep the following variables: `state_name`, `county_name`, `total_votes_20`, `repub_pct_20`, `dem_pct_20`, `total_votes_16`, `dem_pct_16`

```{r}
# Define elections_small
 elections_small <- elections |>
  select(state_name, county_name, total_votes_20, repub_pct_20, dem_pct_20, total_votes_16, dem_pct_16)

# Check out the first 6 rows to confirm your code did what you think it did!
head(elections_small)

```



### Exercise 2: `filter` Demo {-}

Whereas `select()` selects certain *variables* or columns, `filter()` keeps certain *units of observation* or rows relative to their outcome on certain variables. To this end, we must:

-   Identify the variable(s) that are relevant to the filter.

-   Use a "logical comparison operator" to define which values of the variable to *keep*:

    | symbol             | meaning                   |
    |:-------------------|:--------------------------|
    | `==`               | equal to                  |
    | `!=`               | not equal to              |
    | `>`                | greater than              |
    | `>=`               | greater than or equal to  |
    | `<`                | less than                 |
    | `<=`               | less than or equal to     |
    | `%in% c(???, ???)` | a list of multiple values |

-   Use quotes `""` when specifying outcomes of interest for a categorical variable.



::: {.callout-tip title="Commenting/Uncommenting Code"}

To comment/uncomment several lines of code at once, highlight them then click <kbd>ctrl/cmd+shift+c</kbd>.

:::



```{r}
# Keep only data on counties in Hawaii
elections_small |>
  filter(state_name == "Hawaii")
```

```{r}
# What does this do?
# it keeps counties in Hawaii and Delaware
 elections_small |> 
   filter(state_name %in% c("Hawaii", "Delaware"))
```

```{r}
# Keep only data on counties where the Republican got MORE THAN 93.97% of the vote in 2020
# THINK: What variable is relevant here?
elections_small |>
  filter(repub_pct_20 > 93.97)
```

```{r}
# Keep only data on counties where the Republican got AT LEAST 93.97% of the vote in 2020
# This should have 1 more row (observation) than your answer above
elections_small |>
  filter(repub_pct_20 >= 93.97)
```

We can also filter with respect to 2 rules! Here, think what variables are relevant.

```{r}
# Keep only data on counties in Texas where the Democrat got more than 65% of the vote in 2020
# Do this 2 ways.
# Method 1: 2 filters with 1 condition each
elections_small |> 
  filter(state_name == "Texas") |> 
  filter(dem_pct_20 > 65)

# Method 2: 1 filter with 2 conditions
elections_small |> 
  filter(state_name == "Texas", dem_pct_20 > 65)
```



### Exercise 3: `arrange` Demo {-}


`arrange()` arranges or sorts the *rows* in a dataset according to a given column or variable, in ascending or descending order:

`arrange(variable)`, `arrange(desc(variable))`

```{r}
# Arrange the counties in elections_small from lowest to highest percentage of 2020 Republican support
# Print out just the first 6 rows
 elections_small |> 
   arrange(repub_pct_20) |> 
   head(6)
```

```{r}
# Arrange the counties in elections_small from highest to lowest percentage of 2020 Republican support
# Print out just the first 6 rows
elections_small |>
  arrange(desc(repub_pct_20)) |>
  head(6)
```



### Exercise 4: `mutate` Demo {-}


`mutate()` can either transform / mutate an existing variable (column), or define a new variable based on existing ones.

#### Part a {-}

```{r}
# What did this code do?
# This created a new column that has the difference in votes between Republican and Democrat
 elections_small |> 
   mutate(diff_20 = repub_pct_20 - dem_pct_20) |> 
   head()
```

```{r}
# What did this code do?
# this created a new column that defined the number of republican votes in 2020
 elections_small |> 
  mutate(repub_votes_20 = round(total_votes_20 * repub_pct_20/100)) |> 
   head()
```

```{r}
# What did this code do?
# This created a new column that defines if Republicans won their county
 elections_small |> 
   mutate(repub_win_20 = repub_pct_20 > dem_pct_20) |> 
   head()
```

#### Part b {-}

```{r}
# You try
# Define a variable that calculates the change in Dem support in 2020 vs 2016
elections_small |> 
  mutate(dem_support = dem_pct_20 - dem_pct_16) |> 
  head()
```

```{r}
# You try
# Define a variable that determines whether the Dem support was higher in 2020 than in 2016 (TRUE/FALSE)
elections_small |> 
  mutate(dem20_gain = dem_pct_20 > dem_pct_16) |> 
  head()
```



### Exercise 5: Pipe Series {-}

Let's now combine these verbs into a pipe series!

#### Part a {-}

::: {.callout-important title="Think then Run"}

BEFORE running the below chunk, what do you think it will produce?
I think this will filter out counties in Wisconsin where Republicans won and arrange it by descending number of votes

:::

```{r}
 elections_small |> 
   filter(state_name == "Wisconsin",
          repub_pct_20 < dem_pct_20) |> 
   arrange(desc(total_votes_20)) |> 
   head()
```

#### Part b {-}

::: {.callout-important title="Think then Run"}

BEFORE trying, what do you think will happen if you change the order of filter and arrange:

-   the results will be the same
-   we'll get an error, 
-   we won't get an error, but the results will be different

- I think that we will get an error

:::

```{r}
# Now try it. Change the order of filter and arrange below.
 elections_small |> 
   arrange(desc(total_votes_20)) |>
   filter(state_name == "Wisconsin",
          repub_pct_20 < dem_pct_20) |> 
   head()
```

#### Part c {-}

So the order of `filter()` and `arrange()` did *not* matter -- rerranging them produces the same results. BUT what is one *advantage* of filtering before arranging?

#### Part d {-}

::: {.callout-important title="Think then Run"}

BEFORE running the below chunk, what do you think it will produce?

:::

```{r}
 elections_small |> 
   filter(state_name == "Delaware") |> 
   mutate(repub_win_20 = repub_pct_20 > dem_pct_20) |> 
   select(county_name, repub_pct_20, dem_pct_20, repub_win_20)
```

#### Part e {-}

::: {.callout-important title="Think then Run"}

BEFORE trying, what do you think will happen if you change the order of mutate and select:

1.   the results will be the same
2.   we'll get an error
3.   we won't get an error, but the results will be different

:::

```{r}
# Now try it. Change the order of mutate and select below.
 elections_small |> 
   filter(state_name == "Delaware") |> 
   mutate(repub_win_20 = repub_pct_20 > dem_pct_20) |> 
   select(county_name, repub_pct_20, dem_pct_20, repub_win_20)
```



### Exercise 6: DIY Pipe Series {-}

We've now learned 4 of the 6 wrangling verbs: `select`, `filter`, `mutate`, `arrange.` Let's practice combining these into pipe series. Here are some hot tips:

-   Before writing any code, translate the prompt: how many distinct wrangling steps are needed and what verb do we need in each step?
-   Add each verb one at a time -- don't try writing a whole chunk at once.

#### Part a {-}

Show just the counties in Minnesota and their Democratic 2020 vote percentage, from highest to lowest. Your answer should have just 2 columns.

```{r}
elections_small |> 
  filter(state_name == "Minnesota")|>
  select(county_name, dem_pct_20)|>
  arrange(desc(dem_pct_20)) |>
  head()
```

#### Part b {-}

Create a new dataset named `mn_wi` that sorts the counties in Minnesota and Wisconsin from lowest to highest in terms of the *change* in Democratic vote percentage in 2020 vs 2016. This dataset should include the following variables (and only these variables): `state_name`, `county_name`, `dem_pct_20`, `dem_pct_16`, and a variable measuring the change in Democratic vote percentage in 2020 vs 2016.

```{r}
# Define the dataset
# Filter counties in MN and WI filter by state name, select variables, mutate change in vote %, and arrange by that change in vote %
# Only store the results once you're confident that they're correct
mn_wi <- elections_small |>
  filter(state_name %in% c("Minnesota", "Wisconsin")) |>
  select(state_name, county_name, dem_pct_20, dem_pct_16)|>
  mutate(dem20_change = dem_pct_20 - dem_pct_16) |>
  arrange(dem20_change)

# Check out the first 6 rows to confirm your results
head(mn_wi)
```

#### Part c {-}

Construct and discuss a plot of the county-level change in Democratic vote percent in 2020 vs 2016, and how this differs between Minnesota and Wisconsin.

```{r}
#install ggplot package
library(ggplot2)

ggplot(mn_wi, aes(x = dem20_change, fill = state_name))+
  geom_density(alpha = 0.5)+
  scale_fill_viridis_d()
```

- This shows that there was a stronger shift towards democrate in 2020 in Minnesota than in Wiscon and more generally the shift was possitve for both states.


### Exercise 7: `summarize` Demo {-}

6 verbs: `select`, `filter`, `arrange`, `mutate`, `summarize`, `group_by`

Let's talk about the last 2 verbs. `summarize()` (or equivalently `summarise()`) takes an entire data frame as input and outputs a single row with one or more summary statistics. For each chunk below, indicate what the code does.

```{r}
# What does this do? This gives us the medain republican percentage of vote in 2020
 elections_small |> 
   summarize(median(repub_pct_20))
```

```{r}
# What does this do? Calculate the median republican % vote in 2020 and name it median_repub
 elections_small |> 
   summarize(median_repub = median(repub_pct_20))
```

```{r}
# What does this do? Does the same as the previous prompt for reppub_pct_20 and also calculates the sum of total votes in 2020 and names it total_votes
 elections_small |> 
   summarize(median_repub = median(repub_pct_20), total_votes = sum(total_votes_20))
```



### Exercise 8: `summarize` + `group_by` demo {-}


Finally, `group_by()` groups the units of observation or rows of a data frame by a specified set of variables. Alone, this function doesn't change the appearance of our dataset or seem to do anything at all:

```{r}
 elections_small |> 
   group_by(state_name)
```

Though it does change the underlying structure of the dataset:

```{r}
# Check out the structure before and after group_by
 elections_small |> 
   class()
# 
elections_small |> 
  group_by(state_name) |> 
   class()
```

Where it really shines is in partnership with `summarize()`.

```{r}
# What does this do? It calculates summaries for each state
# (What if we didn't use group_by?) Then, the summaries would be for the whole data set rather than by groups of state name
 elections_small |> 
   group_by(state_name) |> 
   summarize(median_repub = median(repub_pct_20), total_votes = sum(total_votes_20)) 
```

::: {.callout-warning title="Reflect"}

Notice that `group_by()` with `summarize()` produces new data frame or tibble! But the units of observation are now states instead of counties within states.

:::



### Exercise 9: DIY {-}

Let's practice (some of) our 6 verbs: `select`, `filter`, `arrange`, `mutate`, `summarize`, `group_by` Remember:

-   Before writing any code, translate the given prompts: how many distinct wrangling steps are needed and what verb do we need in each step?
-   Add each verb one at a time.

#### Part a {-}

NOTE: Part a is a challenge exercise. If you get really stuck, move on to Part b which is the same overall question, but with hints.

```{r}
# Sort the *states* from the most to least total votes cast in 2020
# group by state, summarize total votes, arrange descending by total votes
elections_small |> 
   group_by(state_name) |> 
   summarize(median_repub = median(repub_pct_20), total_votes = sum(total_votes_20)) |>
  arrange(desc(total_votes))
```

```{r}
# In 2020, what were the total number of votes for the Democratic candidate and the total number of votes for the Republican candidate in each *state*?
# group by state, mutate to get raw vote per party rather than percent, summarize those mutated columns,
elections_small |> 
  mutate(dem_votes_20 = round(total_votes_20 * dem_pct_20 / 100), 
         repub_votes_20 = round(total_votes_20 * repub_pct_20 / 100)) |> 
  group_by(state_name) |> 
  summarize(dem_total = sum(dem_votes_20), repub_total = sum(repub_votes_20))
```

```{r}
# What states did the Democratic candidate win in 2020?
# mutate vote % to raw count, group by state, summative total party votes, filter dem total over Repub total
elections_small |>
  mutate(dem_votes_20 = round(total_votes_20 * dem_pct_20 / 100), 
         repub_votes_20 = round(total_votes_20 * repub_pct_20 / 100)) |> 
  group_by(state_name) |> 
  summarize(dem_total = sum(dem_votes_20),
            repub_total = sum(repub_votes_20)) |> 
  filter(dem_total > repub_total)
  
```

#### Part b {-}

```{r}
# Sort the states from the most to least total votes cast in 2020
# HINT: Calculate the total number of votes in each state, then sort
elections_small |> 
   group_by(state_name) |> 
   summarize(median_repub = median(repub_pct_20), total_votes = sum(total_votes_20)) |>
  arrange(desc(total_votes))
```

```{r}
# In 2020, what were the total number of votes for the Democratic candidate and the total number of votes for the Republican candidate in each state?
# HINT: First calculate the number of Dem and Repub votes in each *county*
# Then group and summarize these by state
elections_small |> 
  mutate(dem_votes_20 = round(total_votes_20 * dem_pct_20 / 100), 
         repub_votes_20 = round(total_votes_20 * repub_pct_20 / 100)) |> 
  group_by(state_name) |> 
  summarize(dem_total = sum(dem_votes_20), repub_total = sum(repub_votes_20))
```

```{r}
# What states did the Democratic candidate win in 2020?
# HINT: Start with the results from the previous chunk, and then keep only some rows
elections_small |>
  mutate(dem_votes_20 = round(total_votes_20 * dem_pct_20 / 100), 
         repub_votes_20 = round(total_votes_20 * repub_pct_20 / 100)) |> 
  group_by(state_name) |> 
  summarize(dem_total = sum(dem_votes_20),
            repub_total = sum(repub_votes_20)) |> 
  filter(dem_total > repub_total)
```



### Exercise 10: Practice on New Data {-}

Recall the World Cup football/soccer data from TidyTuesday:

```{r}
world_cup <- read.csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-11-29/worldcups.csv")
```

You can find a codebook [here](https://github.com/rfordatascience/tidytuesday/tree/master/data/2022/2022-11-29). Use (some of) our 6 verbs (`select`, `filter`, `arrange`, `mutate`, `summarize`, `group_by`) and data viz to address the following prompts.

```{r}
# In what years did Brazil win the World Cup?
world_cup |>
  filter(winner == "Brazil")
```

```{r}
# What were the 6 World Cups with the highest attendance?
world_cup |>
  arrange(desc(attendance))|>
  head(6)
```

```{r}
# Construct a univariate plot of goals_scored (no wrangling necessary)
# This provides a visual summary of how the number of goals_scored varies from World Cup to World Cup
ggplot(world_cup, aes(x = goals_scored))+
  geom_histogram(color = "white")+
  theme_minimal()
```

```{r}
# Let's follow up the plot with some more precise numerical summaries
# Calculate the min, median, and max number of goals_scored across all World Cups
# NOTE: Visually compare these numerical summaries to what you observed in the plot
world_cup |>
  summarise(median(goals_scored), max(goals_scored), min(goals_scored))
```

```{r}
# Construct a bivariate plot of how the number of goals_scored in the World Cup has changed over the years
# No wrangling necessary
ggplot(world_cup, aes(x = year, y = goals_scored))+
  geom_point()+
  geom_line()
```

```{r}
# Our above summaries might be a bit misleading.
# The number of games played at the World Cup varies.
# Construct a bivariate plot of how the typical number of goals per game has changed over the years
PerGame_data <- world_cup |>
  mutate(goals_per_game = goals_scored / games)


ggplot(PerGame_data, aes(x = year, y = goals_per_game))+
         geom_point()+
         geom_line()


```



### Exercise 11: Practice on Your Data {-}

Return to the TidyTuesday data you're using in Homework 3. Use your new wrangling skills to play around. What new insights can you gain?!

```{r}
#import data
exped_tidy <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-01-21/exped_tidy.csv')
peaks_tidy <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-01-21/peaks_tidy.csv')
```

```{r}
exped_tidy |>
  summarise(median(HIGHPOINT))
```
