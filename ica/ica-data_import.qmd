---
title: "Data Import"
format: html
---

### Exercise 1: Save Data Locally {.unnumbered}

#### Part a {.unnumbered}

On your laptop:

-   Download the "imdb_5000_messy.csv" file from Moodle
-   Move it to the *data* folder in your portfolio repository

#### Part b {.unnumbered}

Hot tip: After saving your data file, it's important to record appropriate citations and info in either a new qmd (eg: "imdb_5000_messy_README.qmd") or in the qmd where you'll analyze the data. These citations should include:

-   the data *source*, i.e. where you *found* the data
-   the data *creator*, i.e. who / what group *collected* the original data
-   possibly a data *codebook*, i.e. descriptions of the data variables

To this end, check out where we originally got our IMDB data:

https://www.kaggle.com/datasets/tmdb/tmdb-movie-metadata

After visiting that website, take some quick notes here on the data *source* and *creator*.

- The data comes from the Movie Data base, it was updated after IMDB asked the creator to take the orginal data down

### Exercise 2: Import Data to RStudio {.unnumbered}

Now that we have a local copy of our data file, let's get it into RStudio! Remember that this process depends on 2 things: the file *type* and *location*. Since our file *type* is a csv, we can import it using `read_csv()`. But we have to supply the file *location* through a file path. To this end, we can either use an **absolute file path** or a **relative file path**.

#### Part a {.unnumbered}

An absolute file path describes the location of a file starting from the root or home directory. How we refer to the user root directory depends upon your machine:

-   On a Mac: `~`
-   On Windows: typically `C:\`

Then the complete file path to the IMDB data file in the data folder, depending on your machine an where you created your portfolio project, can be:

-   On a Mac: `~/Desktop/portfolio/data/imdb_5000_messy.csv`
-   On Windows: `C:\Desktop\portfolio\data\imdb_5000_messy.csv` or `C:\\Desktop\\portfolio\\data\\imdb_5000_messy.csv`

Putting this together, use `read_csv()` with the appropriate absolute file path to import your data into RStudio. Save this as `imdb_messy`.

```{r}
library(tidyverse)
 imdb_messy <- read_csv("~/documents/GitHub/portfolio-zmarshak/data/imdb_5000_messy.csv")
```

#### Part b {.unnumbered}

Absolute file paths can get really long, depending upon our number of sub-folders, and they should not be used when sharing code with other and instead **relative file paths** should be used.  A **relative file path** describes the location of a file from the current "working directory", i.e. where RStudio would currently look for on your computer. Check what your working directory is *inside this qmd*:

```{r}
# This should be the folder where you stored this qmd!
getwd()
```

Next, check what the working directory is for the *console* by typing `getwd()` in the *console*. This is probably different, meaning that the relative file paths that will work in your qmd won't work in the console! You can either exclusively work inside your qmd, or change the working directory in your console, by navigating to the following in the upper toolbar: Session \> Set Working Directory \> To Source File location.

#### Part c {.unnumbered}

As a good practice, we created a `data` folder and saved our data file (`imdb_5000_messy.csv`) into.

Since our .qmd analysis and .csv data live in the same project, we don't have to write out *absolute file paths* that go all the way to the root directory. We can use *relative file paths* that start from where our code file exists to where the data file exist:

-   On a Mac: `../data/imdb_5000_messy.csv`
-   On Windows: `..\data\imdb_5000_messy.csv` or `..\\data\\imdb_5000_messy.csv`

**NOTE**: `..` means go up one level in the file hierarchy, ie, go to the parent folder/directory.

Putting this together, use `read_csv()` with the appropriate relative file path to import your data into RStudio. Save this as `imdb_temp` (`temp` for "temporary"). Convince yourself that this worked, i.e. you get the same dataset as `imdb_messy`.

```{r}
imdb_temp <- read_csv("../data/imdb_5000_messy.csv")
```

::: {.callout-tip title="File Paths"}

Absolute file paths should be used when referring to files hosed on the web, eg, `https://mac-stat.github.io/data/kiva_partners2.csv`.  In all other instances, relative file paths should be used.

:::

#### Part d: OPTIONAL {.unnumbered}

Sometimes, we don't want to import the *entire* dataset. For example, we might want to...

-   skips some rows, eg, if they're just "filler"
-   only import the *first* "n" rows, eg, if the dataset is really large
-   only import a *random* subset of "n" rows, eg, if the dataset is really large

The "data import cheat sheet" at the top of this qmd, or Google, are handy resources here. As one example...

```{r}
# Try importing only the first 5 rows
 read_csv("../data/imdb_5000_messy.csv", n_max = 5)
```

::: {.callout-tip title="Commenting/Uncommenting Code"}

To comment/uncomment several lines of code at once, highlight them then click <kbd>ctrl/cmd+shift+c</kbd>.

:::


### Exercise 3: Check Data {.unnumbered}

After importing new data into RStudio, you MUST do some quick checks of the data. Here are two first steps that are especially useful.

#### Part a {.unnumbered}

Open `imdb_messy` in the spreadsheet-like viewer by typing `View(imdb_messy)` in the console. Sort this "spreadsheet" by different variables by clicking on the arrows next to the variable names. Do you notice anything unexpected?

#### Part b {.unnumbered}

Do a quick `summary()` of each variable in the dataset. *One* way to do this is below:

```{r}
imdb_messy |>
  mutate(across(where(is.character), as.factor)) |>  # convert characters to factors in order to summarize
  summary()
```

Follow-up:

-   What type of info is provided on quantitative variables?
  - min, median, mean, max, number of NAs, and the 1st and 3rd quantiles
-   What type of info is provided on categorical variables?
  - the count of each observation
-   What stands out to you in these summaries? Is there anything you'd need to clean before using this data?
  - there are a lot of NAs
  _ the color variable is off because there are multipule catagories per type of color when there should just be three color, black and white, and na



### Exercise 4: Clean Data: Factor Variables 1 {.unnumbered}

If you didn't already in Exercise 3, check out the `color` variable in the `imdb_messy` dataset.

-   What's goofy about this / what do we need to fix?
-   More specifically, what different categories does the `color` variable take, and how many movies fall into each of these categories?

```{r}
imdb_messy |>
  count(color)
```



### Exercise 5: Clean Data: Factor Variables 2 {.unnumbered}

When working with categorical variables like `color`, the categories must be "clean", i.e. consistent and in the correct format. Let's make that happen.

#### Part a {.unnumbered}

We *could* open the .csv file in, say, Excel or Google sheets, clean up the `color` variable, save a clean copy, and then reimport that into RStudio. BUT that would be the wrong thing to do. Why is it important to use R code, which we then save inside this qmd, to clean our data?

- we wouldn't know how to reproduce it. With R, it shows how we got to the point of our final clean data

#### Part b {.unnumbered}

Let's use R code to change the `color` variable so that it appropriately combines the various categories into only 2: `Color` and `Black_White`. We've learned a couple sets of string-related tools that could be handy here. First, starting with the `imdb_messy` data, change the `color` variable using one of the functions we learned in the **Factors** lesson.

`fct_relevel()`, `fct_recode()`, `fct_reorder()`

Store your results in `imdb_temp` (don't overwrite `imdb_messy`). To check your work, print out a `count()` table of the `color` variable in `imdb_temp`.

```{r}
imdb_temp <- imdb_messy |>
  mutate(color = fct_recode(color, "Color" = "color", "Color" = "COLOR", "Black_White" = "B&W", "Black_White" = "Black and White"))

imdb_temp |>
  count(color)
```

#### Part c {.unnumbered}

Repeat Part b using one of our string functions from the **String** lesson:

`str_replace()`, `str_replace_all()`, `str_to_lower()`, `str_sub()`, `str_length()`, `str_detect()`

```{r}
imdb_temp <- imdb_messy |>
  mutate(color = str_replace(color, "COLOR", "Color"),
         color = str_replace(color, "color", "Color"),
         color = str_replace(color, "B&W", "Black_White"),
         color = str_replace(color, "Black and White", "Black_White"))

imdb_temp |>
  count(color)
```


### Exercise 6: Clean Data: Missing Data 1 {.unnumbered}

Throughout these exercises, you've probably noticed that there's a bunch of missing data. This is encoded as `NA` (not available) in R. There are a few questions to address about missing data:

-   *How many* values are missing data? What's the volume of the missingness?
-   *Why* are some values missing?
-   *What* should we do about the missing values?

Let's consider the first 2 questions in this exercise.

#### Part a {.unnumbered}

As a first step, let's simply understand the *volume* of NAs. Specifically:

```{r}
# Count the total number of rows in imdb_messy
nrow(imdb_messy)
```

```{r}
# Then count the number of NAs in each column
colSums(is.na(imdb_messy))
```

```{r}
# Then count the number of NAs in a specific column
imdb_messy |>
 summarise(sum(is.na(actor_1_facebook_likes)))
```

#### Part b {.unnumbered}

As a second step, let's think about *why* some values are missing. Study the individual observations with NAs carefully. Why do you think they are missing? Are certain films more likely to have more NAs than others?

-it could be older films or more obsurce films because they just don't have as much infromation on them

#### Part c {.unnumbered}

Consider a more specific example. Obtain a dataset of movies that are missing data on `actor_1_facebook_likes`. Then explain why you think there are NAs. HINT: `is.na(___)`

```{r}
imdb_messy |>
  filter(is.na(actor_1_facebook_likes))
```



### Exercise 7: Clean Data: Missing Data 2 {.unnumbered}

Next, let's think about what to *do* about the missing values. There is no perfect or universal approach here. Rather, we must think carefully about...

-   Why the values are missing?
-   What we want to do with our data?
-   What is the impact of removing or replacing missing data on our work / conclusions?

#### Part a {.unnumbered}

Calculate the average duration of a film. THINK: How can we deal with the NA's?

```{r}
imdb_messy |>
  summarise(mean(duration, na.rm = TRUE))
```

Follow-up:

How are the NAs dealt with here? Did we have to create and save a new dataset in order to do this analysis?
We don't need to make a whole new data set just remove NAs from the calculation

#### Part b {.unnumbered}

Try out the `drop_na()` function:

```{r}
 imdb_temp <- drop_na(imdb_messy)
  nrow(imdb_temp)
```

Follow-up questions:

-   What did `drop_na()` do? How many data points are left?
  - it got rid of all observations with NAs, there are 3756 left
-   In what situations might this function be a good idea?
    - it's good when you need complete  information for each data point
-   In what situations might this function be a bad idea?
  - it's not good for any other situation  

#### Part c {.unnumbered}

`drop_na()` removes data points that have *any* NA values, even if we don't care about the variable(s) for which data is missing. This can result in losing a lot of data points that *do* have data on the variables we actually care about! For example, suppose we only want to explore the relationship between film `duration` and whether it's in `color`. Check out a plot:

```{r}
ggplot(imdb_messy, aes(x = duration, fill = color)) +
  geom_density()
```

Follow-up:

-   Create a new dataset with *only* and *all* movies that have complete info on `duration` and `color`. HINT: You could use `!is.na(___)` or `drop_na()` (differently than above)
-   Use this new dataset to create a new and improved plot.
-   How many movies remain in your new dataset? Hence why this is better than using the dataset from part b?

```{r}
imdb_temp <- imdb_messy |>
  filter(!is.na(duration), !is.na(color))
  
ggplot(imdb_temp, aes(x = duration, fill = color)) +
  geom_density()
```

#### Part d {.unnumbered}

In some cases, missing data is more *non*-data than *unknown* data. For example, the films with NAs for `actor_1_facebook_likes` actually have *0* Facebook likes--they don't even have actors! In these cases, we can *replace* the NAs with a 0. Use the `replace_na()` function to create a new dataset (`imdb_temp`) that replaces the NAs in `actor_1_facebook_likes` with 0. You'll have to check out the help file for this function.

```{r}
imdb_temp <- imdb_messy |>
  mutate(actor_1_facebook_likes = replace_na(actor_1_facebook_likes, 0))

imdb_temp |>
  summarise(sum(is.na(actor_1_facebook_likes)))
```


### Exercise 8: New Data + Projects {.unnumbered}

Let's practice the above ideas while also planting some seeds for the course project. Each group will pick and analyze their own dataset. The people you're sitting with today aren't necessarily your project groups! BUT do some brainstorming together:

-   Share with each other: What are some personal hobbies or passions or things you've been thinking about or things you'd like to learn more about? Don't think too hard about this! Just share what's at the top of mind today.
  - Soccer

-   Each individual: Find a dataset online that's related to one of the topics you shared in the above prompt.
-   Discuss what data you found with your group!
-   Load the data into RStudio, perform some basic checks, and perform some preliminary cleaning, as necessary.
