---
title: "Mulivariate Viz"
---

Use this file for practice with the **mulivariate viz** in-class activity.  Refer to the class website for details.

## Review

Let's review some *univariate* and *bivariate* plotting concepts using some daily weather data from Australia. This is a subset of the data from the `weatherAUS` data in the `rattle` package.

```{r}
library(tidyverse)

# Import data
weather <- read.csv("https://mac-stat.github.io/data/weather_3_locations.csv") |> 
  mutate(date = as.Date(date))  

# Check out the first 6 rows
 (head(weather))
# What are the units of observation?


# How many data points do we have? 
nrow(weather)

# What type of variables do we have?
str(weather)
```



### Example 1 {-}

Construct a plot that allows us to examine how `temp3pm` varies.

```{r}
ggplot(weather, aes(x = temp3pm)) + 
  geom_density()
```



### Example 2 {-}

Construct 3 plots that address the following research question:

How do afternoon temperatures (`temp3pm`) differ by `location`?

```{r}
# Plot 1 (no facets & starting from a density plot of temp3pm)
ggplot(weather, aes(x = temp3pm)) + 
  geom_density()
```

```{r}
# Plot 2 (no facets or densities)
ggplot(weather, aes(y = temp3pm, x = location))+
  geom_boxplot()
```

```{r}
# Plot 3 (facets)
# Plot 3 (facets)
ggplot(weather, aes(x = temp3pm, fill = location)) + 
  geom_density(alpha = 0.5) + 
  facet_wrap(~ location)
```



#### Reflection {-}

-   Temperatures tend to be highest, and most variable, in Uluru. There, they range from \~10 to \~45 with a typical temp around \~30 degrees.
-   Temperatures tend to be lowest in Hobart. There, they range from \~5 to \~45 with a typical temp around \~15 degrees.
-   Wollongong temps are in between and are the least variable from day to day.


**SUBTLETIES: Defining `fill` or `color` by a variable**

How we define the `fill` or `color` depends upon whether we're defining it by a named color or by some variable in our dataset. For example:

-   `geom___(fill = "blue")` \
    *named* colors are defined outside the `aes`thetics and put in quotes

-   `geom___(aes(fill = variable))` or `ggplot(___, aes(fill = variable))` \
colors/fills defined by a *variable* are defined inside the `aes`thetics


### Example 3 {-}

Let's consider Wollongong alone:

```{r}
# Don't worry about the syntax (we'll learn it soon)
woll <- weather |>
  filter(location == "Wollongong") |> 
  mutate(date = as.Date(date))  
```

```{r}
# How often does it raintoday?
# Fill your geometric layer with the color blue.
ggplot(woll, aes(x = raintoday))
  geom_bar( fill = "blue")
```

```{r}
# If it does raintoday, what does this tell us about raintomorrow?
# Use your intuition first
ggplot(woll, aes(x = raintoday))+ 
  geom_bar(aes(fill = raintomorrow))
```


```{r}
# Now compare different approaches

# Default: stacked bars
ggplot(woll, aes(x = raintoday, fill = raintomorrow)) + 
  geom_bar()
```

```{r}
# Side-by-side bars
ggplot(woll, aes(x = raintoday, fill = raintomorrow)) + 
  geom_bar(position = "dodge")
```

```{r}
# Proportional bars
# position = "fill" refers to filling the frame, nothing to do with the color-related fill
ggplot(woll, aes(x = raintoday, fill = raintomorrow)) + 
  geom_bar(position = "fill")
```


#### Reflection {-}

There's often not one "best plot", but a *combination* of plots that provide a complete picture:

-   The stacked and side-by-side bars reflect that on most days, it does *not* rain.
-   The proportional / filled bars *lose* that information, but make it easier to compare proportions: it's more likely to rain tomorrow if it also rains today.



### Example 4 {-}

Construct a plot that illustrates how 3pm temperatures (temp3pm) vary by `date` in Wollongong. Represent each day on the plot and use a curve/line to help highlight the trends.

```{r}
# THINK: What variable goes on the y-axis?
# For the curve, try adding span = 0.5 to tweak the curvature

ggplot(woll, aes(y = temp3pm, x = date)) + 
  geom_point() + 
  geom_smooth(span = 0.5)


```

```{r}
# Instead of a curve that captures the general TREND,
# draw a line that illustrates the movement of RAW temperatures from day to day
# NOTE: We haven't learned this geom yet! Guess.
ggplot(woll, aes(y = temp3pm, x = date))+
  geom_line()
```

**NOTE:** A line plot isn't always appropriate! It can be useful in situations like this, when our data are chronological.


#### Reflection {-}

There's a seasonal / cyclic behavior in temperatures -- they're highest in January (around 23 degrees) and lowest in July (around 16 degrees). There are also some outliers -- some abnormally hot and cold days.


## New Stuff

Next, let's consider the entire `weather` data for all 3 locations. The addition of `location` adds a 3rd variable into our research questions:

-   How does the relationship between `raintoday` and `raintomorrow` vary by `location`?
-   How does the behavior of `temp3pm` over `date` vary by `location`?
-   And so on.

Thus far, we've focused on the following components of a plot:

-   setting up a **frame**
-   adding **layers** / geometric elements
-   splitting the plot into **facets** for different groups / categories
-   change the **theme**, e.g. axis labels, color, fill

We'll have to think about all of this, along with **scales**. Scales change the color, fill, size, shape, or other properties according to the levels of a new *variable*. This is different than just assigning scale by, for example, `color = "blue"`.

Work on the examples below in your groups. Check in with your intuition! We'll then discuss as a group as relevant.


### Example 5 {-}

```{r}
# Plot temp3pm vs temp9am
# Change the code in order to indicate the location to which each data point corresponds
ggplot(weather, aes(y = temp3pm, x = temp9am, color = location)) + 
  geom_point()
```

```{r}
# Change the code in order to indicate the location to which each data point corresponds
# AND identify the days on which it rained / didn't raintoday
ggplot(weather, aes(y = temp3pm, x = temp9am, color = location)) + 
  geom_point()+
  facet_wrap(~ raintoday)
```

```{r}
# How many ways can you think to make that plot of temp3pm vs temp9am with info about location and rain?
# Play around!
ggplot(weather, aes(y = temp3pm, x = temp9am, color = location)) + 
  geom_line()+
  facet_wrap(~ raintoday)
```

### Example 6 {-}

```{r}
# Change the code in order to construct a line plot of temp3pm vs date for each separate location (no points!)
ggplot(weather, aes(y = temp3pm, x = date, color = location)) + 
  geom_line()
```


### Example 7 {-}

```{r}
# Plot the relationship of raintomorrow & raintoday
# Change the code in order to indicate this relationship by location
ggplot(weather, aes(x = raintoday, fill = raintomorrow)) + 
  geom_bar(position = "fill")+
  facet_wrap(~ location)
```


::: {.callout-tip title="How to Not Get Overwhelmed?"}

There's no end to the number and type of visualizations you *could* make. And it's important to not just throw spaghetti at the wall until something sticks. [FlowingData](http://flowingdata.com/2017/01/24/one-dataset-visualized-25-ways/) shows that one dataset can be visualized *many* ways, and makes good recommendations for data viz workflow, which we modify and build upon here:

-   **Identify simple research questions.**\
    What do you want to understand about the variables or the relationships among them?

-   **Start with the basics and work incrementally.**
    -   Identify what variables you want to include in your plot and what structure these have (eg: categorical, quantitative, dates)
    -   Start simply. Build a plot of just 1 of these variables, or the relationship between 2 of these variables.
    -   Set up a plotting frame and add just **one geometric layer at a time**.
    -   Start tweaking: add whatever new variables you want to examine,

-   **Ask your plot questions.**
    -   What questions *does* your plot answer? What questions are left *unanswered* by your plot?
    -   What *new* questions does your plot spark / inspire?
    -   Do you have the viz tools to answer these questions, or might you learn more?
